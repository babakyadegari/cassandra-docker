# Please note we are using Docker Compose version 3
version: '3'
services:
    cassandra-0:
        build: ./database/
        image: cassandra-base
        networks:
            front:
                ipv4_address: 172.20.238.10
        volumes:
            - ./n0data:/var/lib/cassandra
        healthcheck:
          test: ["CMD-SHELL", "[ $$(nodetool statusgossip) = running ]"]
          interval: 30s
          timeout: 10s
          retries: 5
        #command: (/seed_db.sh&) && /bin/bash -c '/docker-entrypoint.sh cassandra -f'
        environment:
            - CASSANDRA_CLUSTER_NAME=dev_cluster
            - CASSANDRA_SEEDS=cassandra-0
        expose:
            - 7000
            - 7001
            - 7199
            - 9160
        ports:
            - "9042:9042"
        ulimits:
            memlock: -1
            nproc: 32768
            nofile: 100000
        # # resource constrains
        # deploy:
        #   resources:
        #     limits:
        #       cpus: '0.1'
        #       memory: 1G
    emqx:
      build: ./emqx_cassandra_backend/
      image: emqx-cass-dev
      depends_on:
        - cassandra-0
          #condition: service_healthy
      networks:
          front:
              ipv4_address: 172.20.238.11
      ports:
          - "1883:1883"
          - "18083:18083"
          - "8083:8083"
      # volumes:
      #     - ./emqx_cassandra_backend:/emqx-rel/_build/emqx/lib/emqx_cassandra_backend/
          #- ./emqx_cassandra_backend:/emqx-rel/_build/emqx+test/lib/emqx_cassandra_backend/
          #- ./emqx_cassandra_backend:/emqx-rel/_build/default/lib/emqx_cassandra_backend/

    api_service:
        build: ./WebServices/
        image: apiserver
        depends_on:
          - cassandra-0
            #condition: service_healthy
        ports:
            - "3000:3000"
        volumes:
            - ./WebServices:/srv/app/WebServices
        # command: /bin/bash -c 'npm install && npm run dev'
        networks:
            front:
                ipv4_address: 172.20.238.12

    # n1:
    #     image: cassandra:3.10
    #     command: bash -c 'if [ -z "$$(ls -A /var/lib/cassandra/)" ] ; then sleep 60; fi && /docker-entrypoint.sh cassandra -f'
    #     networks:
    #         - front
    #     volumes:
    #         - ./n1data:/var/lib/cassandra
    #     environment:
    #         - CASSANDRA_CLUSTER_NAME=dev_cluster
    #         - CASSANDRA_SEEDS=n0
    #     depends_on:
    #           - n0
    #     expose:
    #         - 7000
    #         - 7001
    #         - 7199
    #         - 9042
    #         - 9160
    #     ulimits:
    #         memlock: -1
    #         nproc: 32768
    #         nofile: 100000
    #     deploy:
    #       resources:
    #         limits:
    #           cpus: '0.1'
    #           memory: 2G
    #
    # n2:
    #     image: cassandra:3.10
    #     command: bash -c 'if [ -z "$$(ls -A /var/lib/cassandra/)" ] ; then sleep 120; fi && /docker-entrypoint.sh cassandra -f'
    #     networks:
    #         - front
    #     volumes:
    #         - ./n2data:/var/lib/cassandra
    #     environment:
    #         - CASSANDRA_CLUSTER_NAME= dev_cluster
    #         - CASSANDRA_SEEDS=n0
    #     depends_on:
    #           - n0
    #     expose:
    #         - 7000
    #         - 7001
    #         - 7199
    #         - 9042
    #         - 9160
    #     ulimits:
    #         memlock: -1
    #         nproc: 32768
    #         nofile: 100000
    #     deploy:
    #       resources:
    #         limits:
    #           cpus: '0.1'
    #           memory: 2G
    # # A web based interface for managing your docker containers.
    # portainer:
    #     image: portainer/portainer
    #     networks:
    #         front:
    #           ipv4_address: 172.16.238.50
    #     volumes:
    #         - /var/run/docker.sock:/var/run/docker.sock
    #         - ./portainer-data:/data
    #     # Enable you to access potainers web interface from your host machine
    #     # using http://localhost:10001
    #     ports:
    #         - "10001:9000"
networks:
    front:
        driver: bridge
        ipam:
            driver: default
            config:
                - subnet: "172.20.238.0/24"
